% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/install_package_version.R
\name{install_package_version}
\alias{install_package_version}
\title{Installing a specific version of a package (keep other versions!)}
\usage{
install_package_version(
  package,
  version,
  lib.install.path = .libPaths()[1],
  use.only.lib.install.path = T,
  cran.mirror = "https://cloud.r-project.org/",
  archiv.path = "src/contrib/Archive/",
  main.path = "src/contrib/",
  repo = "cran",
  auto.update.version.in.files = TRUE
)
}
\arguments{
\item{package}{(chr value): Name of the package to install (e.g. "ggplot2")}

\item{version}{(chr value): Version of the package to install (e.g. "3.4.0")}

\item{lib.install.path}{(chr value): Folder in which to install the packages}

\item{use.only.lib.install.path}{(bool): Only check in <lib.install.path> for installed packages and dependencies}

\item{cran.mirror}{(chr value): Main url of the cran mirror to use (e.g. "https://cloud.r-project.org/")}

\item{archiv.path}{(chr value): URL-path to the archive of the cran mirror to use (e.g. "src/contrib/Archive/")}

\item{main.path}{(chr value): URL-path to the pages main page of the cran mirror to use (e.g. "src/contrib/"")}

\item{repo}{(chr value): Which type of repo is used? This information is utilized when building the URL,
because each repo has its own file structure. Currently supported: "cran" & "nexus"}

\item{auto.update.version.in.files}{(bool):
If TRUE the version of a package in the installed files will be changed to the required version. This only happens if
it's the same version but the structure of the version name differs e.g. 0.1.10 to 0.1-1 see \code{\link[pama]{find_package_version_on_cran}}
When FALSE nothing happens}
}
\description{
!!! Recursive function !!!
Steps:
1. Trying to find the requested package version on CRAN
  1.1 ... if found: download .tar.gz-file
  1.2 ... else: check which versions are available and ask user to choose one
2. Extracting dependencies of the package version & compare with installed package versions
3. Checking whether all requirements are fulfilled (no check for exact match, just for min. version)
  3.1 ... if true: install package version
  3.2 ... else: (recursive!) use install_package_version() for every unsatisfied requirement.
    If version of the required package is 'NA', install newest version
4. After installation load packages once to ensure functionality
}
\note{
See all available CRAN Packages by Name here: https://cran.r-project.org/web/packages/available_packages_by_name.html
}
\section{Dependencies}{

- find_package_version_on_cran()
- get_installed_packages() [<- update_packages_search_path()]

- get_dependencies()

- update_packages_search_path()
}

\section{Side effects}{
 Installation of the package & adding package location to the search paths
}

\section{Return}{
 TRUE (successful installation) or FALSE (UNsuccessful installation)
}

\section{test}{

```{r lorem}
1+1
```
}

\examples{
\dontrun{
sessionInfo()
install_package_version("ggplot2", "3.4.0")
sessionInfo()
library_version("ggplot2", "3.4.0")
sessionInfo()
detach(paste0("package:","ggplot2"), character.only = TRUE) # character.only = TRUE <- needed when paste0() or object used
}

}
\seealso{
[pama::setupLib()], `browseVignettes("pama")`, `help(package = "pama")`
}
\author{
Simon Ress
}
\keyword{installing}
\keyword{package-versions}
